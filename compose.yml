name: pinklifeline

services:
  db:
    image: mysql:latest
    container_name: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=pinklifeline
      - MYSQL_USER=pinklifeline
      - MYSQL_PASSWORD=pinklifeline
      - MYSQL_DATABASE=pinklifeline
    ports:
      - "3306:3306"
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pinklifeline_network

  redis:
    image: redis/redis-stack:latest
    container_name: redis-stack
    volumes:
      - ${PWD}/redis-stack.conf:/redis-stack.conf
    ports:
      - "6379:6379"
      - "8001:8001"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pinklifeline_network

  backend:
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Either you can build your own image or get one from dockerhub
    # Comment one or the other
    build:
      context: ./backend/pinklifeline
    # image: sadatul/pinklifeline_dev:0.0.1-SNAPSHOT
    container_name: backend
    environment:
      - TZ=Asia/Dhaka
      - BACKEND_HOST=http://localhost:8080
      - FRONTEND_HOST=http://localhost:3000
      - DB_URL=mysql:3306/pinklifeline
      - DB_USERNAME=pinklifeline
      - DB_PASSWORD=pinklifeline
      - REDIS_HOST=redis-stack
      - REDIS_PORT=6379
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=pinklifeline
      - GETSTREAM_API_KEY=${GETSTREAM_API_KEY}
      - GETSTREAM_API_SECRET=${GETSTREAM_API_SECRET}
      - SSLCOMMERZ_STORE_ID=${SSLCOMMERZ_STORE_ID}
      - SSLCOMMERZ_STORE_PASSWD=${SSLCOMMERZ_STORE_PASSWD}
    ports:
      - "8080:8080"
    networks:
      - pinklifeline_network
networks:
  pinklifeline_network:
